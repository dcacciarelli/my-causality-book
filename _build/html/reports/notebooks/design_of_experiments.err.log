Traceback (most recent call last):
  File "/opt/anaconda3/envs/causal-inference-book/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/envs/causal-inference-book/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/causal-inference-book/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/causal-inference-book/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/causal-inference-book/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/envs/causal-inference-book/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/envs/causal-inference-book/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from statsmodels.tools import add_constant
from mpl_toolkits.mplot3d import Axes3D

# Data for CCD
data = pd.DataFrame({
    'Cleaning_Frequency': [-1, -1, 1, 1, 0, 0, -1.414, 1.414, 0, 0],
    'Tilt_Angle': [-1, 1, -1, 1, 0, 0, 0, 0, -1.414, 1.414],
    'Output': [500, 520, 540, 560, 550, 570, 530, 580, 540, 580]
})

# Define the design matrix for the quadratic model
X = np.column_stack((data['Cleaning_Frequency'], data['Tilt_Angle'],
                     data['Cleaning_Frequency']**2, data['Tilt_Angle']**2,
                     data['Cleaning_Frequency']*data['Tilt_Angle']))

# Add constant (intercept)
X = add_constant(X)

# Fit the model
model = OLS(data['Output'], X).fit()

# Prepare data for 3D surface plot
x1 = np.linspace(-1.5, 1.5, 30)
x2 = np.linspace(-1.5, 1.5, 30)
X1, X2 = np.meshgrid(x1, x2)
X1_flat = X1.flatten()
X2_flat = X2.flatten()

# Create design matrix for predictions
X_pred = np.column_stack((np.ones_like(X1_flat), X1_flat, X2_flat,
                          X1_flat**2, X2_flat**2, X1_flat*X2_flat))

# Predict the response
Y_pred = model.predict(X_pred).reshape(X1.shape)

# Plot the response surface
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X1, X2, Y_pred, cmap='viridis', edgecolor='none')
ax.set_xlabel('Cleaning Frequency (times/month)')
ax.set_ylabel('Tilt Angle (degrees)')
ax.set_zlabel('Output (kWh)')
plt.title('Response Surface using CCD')
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[4], line 20[0m
[1;32m     17[0m X [38;5;241m=[39m add_constant(X)
[1;32m     19[0m [38;5;66;03m# Fit the model[39;00m
[0;32m---> 20[0m model [38;5;241m=[39m OLS(data[[38;5;124m'[39m[38;5;124mOutput[39m[38;5;124m'[39m], X)[38;5;241m.[39mfit()
[1;32m     22[0m [38;5;66;03m# Prepare data for 3D surface plot[39;00m
[1;32m     23[0m x1 [38;5;241m=[39m np[38;5;241m.[39mlinspace([38;5;241m-[39m[38;5;241m1.5[39m, [38;5;241m1.5[39m, [38;5;241m30[39m)

[0;31mNameError[0m: name 'OLS' is not defined

